# Illustrates using Python to run and retrieve results of standard
# reports defined in the Canvas Learning Management System.
# Some details that would be read from a parameters file are hard-coded
# here to keep the illustration simple.
#
# Import
#
import json
import requests
import base64
import time
import sys
#
# Read the paramters file and decode and reformat elements.
# The paramters file contains the base URL for the standard Canvas reports
# and an access token that was created within the Canvas LMS. These
# are encoded just to avoid having them reside as plain text in a local
# file.
#
fileName = 'C:\\Users\\JTDDM\\Documents\\PythonProgs\\ReportParams.txt'
parameters = ''
with open(fileName, 'r') as parametersFile:
    parameters = parametersFile.readlines()
baseURL = base64.b64decode(parameters[0]).decode('ascii')
reportsToken = base64.b64decode(parameters[1]).decode('ascii')
reportsBearer = 'Bearer ' + reportsToken
reportsHeader = {'Authorization': reportsBearer}
reportParams = {'parameters[enrollment_term_id]':'34','parameters[enrollment_type]': ['StudentEnrollment']}
#
# Start a Report.
# Adding a pre-existing report name to the base reporting URL, the program
# does an HTTP POST to initiate the report. The 'data=' clause in the
# POST includes settings for report options, such as term, date, and
# type of course enrollment. If successful, the POST returns an ID number that
# identifies the newly requested report and can be used to retrieve the
# report results.
#
print ('Submitting report request')
reportURL = baseURL + 'user_course_access_log_csv'
HTTPResponse = requests.post(reportURL, data= reportParams, headers=reportsHeader)
HTTPStatus = HTTPResponse.status_code
print ('HTTP Status:', HTTPStatus)
if HTTPStatus != 200:
   sys.exit()
HTTPContent = json.loads(HTTPResponse.content)
reportID = str(HTTPContent['id'])
print ('Report ID:', reportID)
print ('Parameters:',HTTPContent['parameters'])
print ('Status:',HTTPContent['status'])
print ('Created At:',HTTPContent['created_at'])
#
# Check Report Status.
# It might take time for the report to complete. This loop checks every two
# minutes, asking if the specific report referenced by the ID number from above
# has been completed, looping until the report status is 'complete'. HTTP GET
# is used in each iteration to get status information about the requested
# report.
#
reportURL = baseURL + 'user_course_access_log_csv/' + reportID
waiting = True
while waiting:
   time.sleep(120)
   print ('Checking Report Status')
   HTTPResponse = requests.get(reportURL, headers=reportsHeader)
   print ('HTTP Get:', HTTPResponse)
   HTTPContent = json.loads(HTTPResponse.content)
   if HTTPContent['status'] == 'complete':
      waiting = False
#
# Download and Save the Report.
# The report status information retrieved above include the name of the
# report file and the URL from which the report can be retrieved. HTTP
# GET is used to retrieve the report. An unusually large report my
# exceded program memory contraints (the GET can be adapted with stream=True
# and the file can be written in chunks if that happens).
#
print('Retrieving report file')
retrieveFileName = HTTPContent['attachment']['filename']
retrieveURL = HTTPContent['attachment']['url']
HTTPResponse = requests.get(retrieveURL, headers=reportsHeader)
fileName = 'C:\\Users\\JTDDM\\Documents\\PythonProgs\\' + retrieveFileName
fileObj = open(fileName,'wb')
fileObj.write(HTTPResponse.content)  
fileObj.close()
